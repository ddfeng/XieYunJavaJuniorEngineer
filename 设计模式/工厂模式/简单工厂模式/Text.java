package 设计模式.工厂模式.简单工厂模式;

import org.junit.Test;

public class Text {
    /**
     * 介绍：简单工厂模式是属于创建型模式，又叫做静态工厂模式(static Factory Method)模式，但是不属于GOF设计模式之一
     * 简单工厂模式是由一个工厂对象决定创建出哪一类产品类的实例
     * <p>
     * 思考？
     * 在我们coding的时候，在a类中new了一个b类的对象，那么a类就会从某种程度上依赖b类
     * 如果在后期需求发生变化或者维护的时候，需要修改b类的时候，我们就需要打开源代码修改这个类所有的相关类了
     * 做过重构的人都知道，这样的事情虽然无法避免，但是这是一件让人心碎的事情
     * <p>
     * 模拟场景
     * 速度与激情中不同场景下主角开不同的车做不同的事情，这真是很酷的一件事
     * <p>
     * 设计
     * 首先创建一个车的接口Car,当然这也可以是个抽象类
     * 然后不同车的类继承接口，执行不同任务，这个任务运用的java多态，方法来自于接口
     * 创建简单工厂CarFactory，根据从导演安排的不同车来实现不同的方法
     * 客户端的测试代码
     * <p>
     * 简单工厂的优点
     * 简单工厂可以根据外界给定的信息，决定究竟应该创建哪个类的对象，明确区分了各自的职责和权利，有利于整个软件体系结构的优化
     * <p>
     * 简单工厂的缺点
     * 很明显工厂类集中了所有实例的常见逻辑，容易违反GRASPR的高内聚的责任分配原则
     */
    @Test
    public void test() {
        Car car = CarFactory.getCar("BenCar");
        car.task();
    }
}
