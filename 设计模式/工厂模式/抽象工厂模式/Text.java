package 设计模式.工厂模式.抽象工厂模式;

import org.junit.Test;

public class Text {
    /**
     * 定义：
     * 为创建一组相关或者相互依赖的对象提供一个借口，而且无需指定他们的具体类
     * <p>
     * 模拟场景以及构建场景：
     * 抽象方法：虚拟的车库，只是所有车库的一个概念。在程序中可能是一个接口或者是一个抽象类，对其他车库的规范
     * 具体工厂：具体存在的车库，用来存放车。在程序中继续抽象工厂，实现抽象工厂中的方法，可以有具体的产品
     * 抽象产品：虚拟的装备(也就是车)，起到规范作用
     * 具体产品：活动参加的车
     * <p>
     * 其实也就是工厂方法的拓展，抽象工厂中有好几个抽象方法
     *
     * 写之后的体验，抽象工厂其实就是同一个产品有两种特质
     * 在这里，汽车包含品牌和型号，传建工厂根据型号来设立两个工厂，来分别生产汽车，具体汽车继承于一个牌子，然后根据型号不同而形成不同产品
     */
    @Test
    public void test() throws Exception {

        Driver3Factory d = new BusinessDriver();
        BenzCar car = d.createBenzCar("老板专用");
        car.drive();
    }

}
